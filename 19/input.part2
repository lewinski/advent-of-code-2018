// registers = 0:a 1:b 2:c 3:ip 4:e 5:f

package main

var a, b, c, d, e, f int

func main() {
	a = 1   // initial condition for part 1

	start() // 0: addi 3 16 3

	// translated into go pseudocode and conditionals unwound
	/*
	   f = 1               // 1: seti 1 9 5
	   e = 1               // 2: seti 1 1 4
	   c = e * f           // 3: mulr 5 4 2
	   if c == b {         // 4: eqrr 2 1 2, 5: addr 2 3 3, 6: addi 3 1 3
	       a = a + f       // 7: addr 5 0 0
	   }
	   e = e + 1           // 8: addi 4 1 4
	   if e > b {          // 9: gtrr 4 1 2, 10: addr 3 2 3
	       f = f + 1       // 12: addi 5 1 5
	       if f > b {      // 13: gtrr 5 1 2, 14: addr 2 3 3
	           halt        // 16: mulr 3 3 3
	       } else {
	           goto 2      // 15: seti 1 4 3
	       }
	   } else {
	       goto 3          // 11: seti 2 3 3
	   }
	*/

	// translate gotos into loops
	/*
	   for f := 1; f <= b; f++ {
	       for e := 1; e <= b; e++ {
	           if e * f == b {
	               a = a + f
	           }
	       }
	   }
	*/

	// rewritten using typical math
	for f := 1; f <= b; f++ {
		if b%f == 0 {
			a = a + f
		}
	}
}

func start() {
	b = b + 2   // 17: addi 1 2 1
	b = b * b   // 18: mulr 1 1 1
	b = 19 * b  // 19: mulr 3 1 1
	b = b * 11  // 20: muli 1 11 1
	c = c + 2   // 21: addi 2 2 2
	c = 22 * c  // 22: mulr 2 3 2
	c = c + 20  // 23: addi 2 20 2
	b = c + b   // 24: addr 1 2 1
	if a == 1 { // 25: addr 3 0 3
		c = 27     // 27: setr 3 9 2
		c = 28 * c // 28: mulr 2 3 2
		c = c + 29 // 29: addr 3 2 2
		c = 30 * c // 30: mulr 3 2 2
		c = c * 14 // 31: muli 2 14 2
		c = 32 * c // 32: mulr 2 3 2
		b = b + c  // 33: addr 1 2 1
		a = 0      // 34: seti 0 6 0
		return     // 35: seti 0 0 3
	}
	return // 26: seti 0 4 3
}
